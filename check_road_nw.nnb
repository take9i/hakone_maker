{
    "cells": [
        {
            "language": "javascript",
            "source": [
                "const jsnx = require('jsnetworkx');"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const edges = JSON.parse(fs.readFileSync('./data/_roads_nw.json', 'utf8'))\nconst nw = new jsnx.MultiDiGraph();\nnw.addEdgesFrom(edges)"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// rID: '50076-12684-i-298'\nnw.getEdgeData([139.105047306, 35.233695833, 93.730600826532], [139.10396225, 35.233333472, 94.61836036288149], 0);"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const tail = (ary) => ary[ary.length - 1];\nconst zip = (...args) => args[0].map((_, i) => args.map((arg) => arg[i]));\n\nconst getCos = (v1, v2) => {\n  const dot = (v1, v2) => v1[0] * v2[0] + v1[1] * v2[1];\n  const mag = (v) => Math.hypot(v[0], v[1]);\n  // return Math.acos(dot(v1, v2) / (mag(v1) * mag(v2)))  // if you want an angle, use this\n  return dot(v1, v2) / (mag(v1) * mag(v2));\n};\nconst getEdges = (node) => {\n  return nw\n    .neighbors(node)\n    .map((nextNode) => Object.keys(nw.getEdgeData(node, nextNode)).map((key) => [node, nextNode, key]))\n    .flat();\n};\nconst getEdgeVec = (edge) => {\n  const vec = (p1, p2) => [p2[0] - p1[0], p2[1] - p1[1]];\n  const { coords } = nw.getEdgeData(...edge);\n  return vec(coords[0], tail(coords));\n};\n\npedge = [[139.099219889, 35.232071528], [139.099469778, 35.231930611], 0];\ngetEdges(pedge[1])\n  .map((ne) => [getCos(getEdgeVec(pedge), getEdgeVec(ne)), ne])\n  .sort((a, b) => b[0] - a[0])[0][1];\n\n// getCosWithNextEdges(nw, [[139.099219889, 35.232071528], [139.099469778, 35.231930611], 0])\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "getEdges(pedge[1])"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "a = [1,3,2,1]\nb = [...a].sort()\na"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "Math.abs(-10)"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}